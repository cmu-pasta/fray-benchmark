diff --git a/build.gradle b/build.gradle
index 7d335c4040..24e8d90786 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1838,6 +1838,11 @@ project(':clients') {
     shadowed
   }
 
+  repositories {
+    mavenLocal()
+    mavenCentral()
+  }
+
   dependencies {
     implementation libs.zstd
     implementation libs.lz4
@@ -1846,6 +1851,7 @@ project(':clients') {
     implementation libs.protobuf
     implementation libs.slf4jApi
 
+
     // libraries which should be added as runtime dependencies in generated pom.xml should be defined here:
     shadowed libs.zstd
     shadowed libs.lz4
@@ -1868,6 +1874,7 @@ project(':clients') {
     testImplementation testLog4j2Libs
 
     testCompileOnly libs.bndlib
+    testCompileOnly 'org.pastalab.fray:fray-junit:0.2.6-SNAPSHOT'
 
     testRuntimeOnly libs.jacksonDatabind
     testRuntimeOnly libs.jacksonJDK8Datatypes
@@ -2725,6 +2732,17 @@ project(':streams') {
     standardOutput = new File(generatedDocsDir, "streams_config.html").newOutputStream()
   }
 
+  tasks.create(name: "copyDependantTestLibs", type: Copy) {
+    from (configurations.testRuntimeClasspath) {
+      include('*.jar')
+    }
+    into "${layout.buildDirectory.get().asFile.path}/dependant-testlibs"
+    //By default gradle does not handle test dependencies between the sub-projects
+    //This line is to include clients project test jar to dependant-testlibs
+    from (project(':clients').testJar ) { "${layout.buildDirectory.get().asFile.path}/dependant-testlibs" }
+    duplicatesStrategy 'exclude'
+  }
+
   task testAll(
     dependsOn: [
             ':streams:test',
@@ -2844,6 +2862,17 @@ project(':streams:integration-tests') {
     testRuntimeOnly runtimeTestLibs
   }
 
+  tasks.create(name: "copyDependantTestLibs", type: Copy) {
+    from (configurations.testRuntimeClasspath) {
+      include('*.jar')
+    }
+    into "${layout.buildDirectory.get().asFile.path}/dependant-testlibs"
+    //By default gradle does not handle test dependencies between the sub-projects
+    //This line is to include clients project test jar to dependant-testlibs
+    from (project(':clients').testJar ) { "${layout.buildDirectory.get().asFile.path}/dependant-testlibs" }
+    duplicatesStrategy 'exclude'
+  }
+
   sourceSets {
     // Set java/scala source folders in the `scala` block to enable joint compilation
     main {
diff --git a/clients/src/test/java/org/apache/kafka/test/TestUtils.java b/clients/src/test/java/org/apache/kafka/test/TestUtils.java
index f0d0a37b6a..326509d00f 100644
--- a/clients/src/test/java/org/apache/kafka/test/TestUtils.java
+++ b/clients/src/test/java/org/apache/kafka/test/TestUtils.java
@@ -79,6 +79,9 @@ import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.jupiter.api.Assertions.fail;
 
+import static org.pastalab.fray.junit.syncurity.ConditionFactoryKt.await;
+import static org.hamcrest.Matchers.equalTo;
+
 /**
  * Helper functions for writing unit tests
  */
@@ -427,12 +430,13 @@ public class TestUtils {
         final long pollIntervalMs,
         Supplier<String> conditionDetailsSupplier
     ) throws InterruptedException {
-        retryOnExceptionWithTimeout(maxWaitMs, pollIntervalMs, () -> {
-            String conditionDetailsSupplied = conditionDetailsSupplier != null ? conditionDetailsSupplier.get() : null;
-            String conditionDetails = conditionDetailsSupplied != null ? conditionDetailsSupplied : "";
-            assertTrue(testCondition.conditionMet(),
-                "Condition not met within timeout " + maxWaitMs + ". " + conditionDetails);
-        });
+        await().until(() -> {
+            try {
+                return testCondition.conditionMet();
+            } catch (Exception e) {
+                return false;
+            }
+        }, equalTo(true));
     }
 
     /**
@@ -474,25 +478,16 @@ public class TestUtils {
     public static void retryOnExceptionWithTimeout(final long timeoutMs,
                                                    final long pollIntervalMs,
                                                    final ValuelessCallable runnable) throws InterruptedException {
-        final long expectedEnd = System.currentTimeMillis() + timeoutMs;
-
-        while (true) {
+        await().until(() -> {
             try {
                 runnable.call();
-                return;
+                return true;
             } catch (final NoRetryException e) {
                 throw e;
-            } catch (final AssertionError t) {
-                if (expectedEnd <= System.currentTimeMillis()) {
-                    throw t;
-                }
             } catch (final Exception e) {
-                if (expectedEnd <= System.currentTimeMillis()) {
-                    throw new AssertionError(String.format("Assertion failed with an exception after %s ms", timeoutMs), e);
-                }
+                return false;
             }
-            Thread.sleep(Math.min(pollIntervalMs, timeoutMs));
-        }
+        }, equalTo(true));
     }
 
     /**
